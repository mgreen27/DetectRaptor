name: Windows.Detection.Amcache
author: Zach Stanford - @svch0st
description: |
   Bulk indicator hunt over Amcache

   This artifact is automatically generated by DetectRaptor.

reference:
  - https://github.com/mgreen27/DetectRaptor

type: CLIENT
resources:
  timeout: 9000

parameters:
   - name: DateAfter
     type: timestamp
     description: "search for events after this date. YYYY-MM-DDTmm:hh:ssZ"
   - name: DateBefore
     type: timestamp
     description: "search for events before this date. YYYY-MM-DDTmm:hh:ssZ"
   - name: CriticalityLevel
     default: .
     description: "Only use detections matching this regex (values can be Critical,High,Medium,Low)"
   - name: IOCs
     type: csv
     default: |
%(ioc)s

sources:
  - precondition:
      SELECT OS From info() where OS = 'windows'

    query: |
      -- firsly split IOCs by path or filename focus
      LET all_the_things <= SELECT * FROM IOCs
        WHERE NOT KeywordRegex = '.' AND Criticality =~ CriticalityLevel
        GROUP BY KeywordRegex
      
      -- run KeywordRegex regex
      LET hits = SELECT *
                            FROM Artifact.Windows.Detection.Amcache(   
                                NameRegex=join(array=all_the_things.KeywordRegex,sep='|'))
      
      -- output results and enrich with IOC data
      SELECT * FROM foreach(row=hits,query={
            SELECT 
                dict(Name=Detection,KeywordRegex=KeywordRegex,PathName=PathName,Reference=Reference,Criticality=Criticality) as Detection,KeyMTime,EntryName,EntryPath,Publisher,SHA1
            FROM all_the_things
            WHERE EntryName =~ KeywordRegex
                AND EntryPath =~ PathRegex
                AND NOT if(condition=IgnoreRegex,
                    then= EntryPath =~ IgnoreRegex,
                    else= False )
            LIMIT 1
        },workers=20)

    notebook:
      - type: vql_suggestion
        name: Critical and High Detections Only
        template: |
            /*
            ### Critical and High Detections
            */
            
            SELECT *
            FROM source()
            WHERE Detection.Criticality =~ "critical|high"

      - type: vql_suggestion
        name: Detection Summary
        template: |
            /*
            ### Detection Summary
            */
            
            SELECT Detection.Name, count() AS Total
            FROM source()
            GROUP BY Detection.Name
            ORDER BY Total DESC 
