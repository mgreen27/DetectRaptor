name: Windows.Detection.NamedPipes
author: Matt Green - @mgreen27
description: |
   Bulk indicator hunt over NamedPipes in velociraptor. The 
   artifact checks both Windows.System.Handles and Sysmon for
   telemetry.

   This artifact is automatically generated by DetectRaptor.

reference:
  - https://github.com/mgreen27/DetectRaptor

type: CLIENT
resources:
  timeout: 3600

parameters:
  - name: IOCs
    type: csv
    default: |
%splitme%

sources:
  - precondition:
      SELECT OS From info() where OS = 'windows'

    query: |
      LET FirstPassRegex <= join(array=IOCs.PipeRegex,sep='|')
      
      LET hits = SELECT * FROM chain(async='Y',
            handles = { 
                SELECT *,
                    timestamp(epoch=now()) as EventTime,
                    regex_replace(source=Name,replace="",re='\\\\Device\\\\NamedPipe\\\\') as PipeName,
                    "FileHandle" as Type
                FROM Artifact.Windows.System.Handles(Files='Y')
                WHERE Name =~ 'NamedPipe'
                    AND PipeName =~ FirstPassRegex
            },
            sysmon = {
                SELECT
                    EventTime,
                    EventData.ProcessId as ProcPid,
                    basename(path=EventData.Image) as ProcName,
                    EventData.Image as Exe,
                    regex_replace(source=EventData.PipeName, 
                        re='^\\\\', replace='') as PipeName,
                    if(condition= EventID=17,
                        then= "SysmonCreated",
                        else= "SysmonConnected" ) as Type
                FROM Artifact.Windows.EventLogs.EvtxHunter(
                  EvtxGlob='C:\\Windows\\System32\\Winevt\\Logs\\*Sysmon*',
                  IdRegex='^(17|18)$')
                WHERE PipeName =~ FirstPassRegex
            })
      
      -- add enrichment and output rows
      SELECT * FROM foreach(row=hits,
        query={
            SELECT 
                EventTime,
                Detection,
                ProcPid, 
                ProcName, 
                Exe, 
                PipeName, 
                Type,
                dict(
                    PipeRegex=PipeRegex,
                    IgnoreExeRegex=IgnoreExeRegex
                        ) as Regex,
                Reference
            FROM IOCs
            WHERE PipeName =~ PipeRegex
                AND NOT if(condition= IgnoreExeRegex,
                           then= Exe=~IgnoreExeRegex.
                           else= False )
            LIMIT 1 -- for performance stop after 1 hit
        }, workers= 20 )
