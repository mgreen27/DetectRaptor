name: Windows.Detection.HijackLibsEnv
author: Matt Green - @mgreen27
description: |
   This artifact collects several datapoints that may indicate an Environment
   Variable based hijack.

   The artifact is automatically generated by DetectRaptor with an API extract
   of Hijacklibs.

   The artifact searches for Environment Variables (default systemroot|windir)
   associated to each process and reports if set to non default.

   The artifact also searches for a DllPath containing System32 not at an
   expected location.

   Finally the artifact searches for known EnvVariable DllNames in hijacklibs in
   unexpected locations with Export Forwards which may indicate a Hijack usecase.

   Expect some false positives, especially for disk based datapoints. Context
   fields have also been included for scoping, an intereting item to review is
   PE forwarding which may indicate a hijacked binary.


reference:
  - https://github.com/mgreen27/DetectRaptor
  - https://www.wietzebeukema.nl/blog/save-the-environment-variables
  - https://hijacklibs.net/

type: CLIENT
resources:
  timeout: 9000

parameters:
   - name: TargetEnv
     type: regex
     description: A regex to select environment variables to target
     default:  ^(systemroot|windir)$
   - name: ExpectedEnv
     type: regex
     description: Expected environment variables to filter out.
     default:  ^C:\\Windows$
   - name: SuspiciousPath
     type: regex
     description: Regex for suspicious path to search for used in Environment variable hijack.
     default:  \\System32\\
   - name: ExpectedPath
     type: regex
     description: Expected path to filter out from SuspiciousPath regex above.
     default:  ^C:\\Windows\\System32\\
   - name: AllCsv
     type: hidden
     default: |
%splitme%


sources:
  - precondition:
      SELECT OS From info() where OS = 'windows'

    name: Process Environment Variables
    query: |
      SELECT * FROM Artifact.Windows.Detection.EnvironmentVariables(
                EnvironmentVariableRegex=TargetEnv,
                FilterValueRegex='.',
                WhitelistValueRegex=if(condition=ExpectedEnv,
                                        then=ExpectedEnv,
                                        else='$^^$')
            )


  - name: Suspicious Dll path
    query: |
      LET IocCsv <= SELECT * FROM parse_csv(filename=AllCsv,accessor='data')

      LET hits = SELECT
            InUse,
            format(format='C:\\%s',args=OSPath) as OSPath,
            FileName, FileSize,SI_Lt_FN,uSecZeros,
            LastModified0x10,LastAccess0x10,LastRecordChange0x10,Created0x10,
            LastModified0x30,LastAccess0x30,LastRecordChange0x30,Created0x30
      FROM parse_mft(filename='C:/$MFT')
      WHERE NOT IsDir
        AND FileName =~ '\.dll$'
        AND OSPath =~ SuspiciousPath --'''\\System32\\'''
        AND NOT OSPath =~ ExpectedPath --'''^C:\\Windows\\System32'''

      LET enrich_ioc(filename) = SELECT * FROM IocCsv WHERE DllName = filename

      SELECT
            OSPath, FileName as DllName,
            FileSize,InUse, SI_Lt_FN, uSecZeros,
            dict(
                LastModified0x10=LastModified0x10,
                LastAccess0x10=LastAccess0x10,
                LastRecordChange0x10=LastRecordChange0x10,
                Created0x10=Created0x10 ) AS TimestampsSI,
            dict(
                LastModified0x30=LastModified0x30,
                LastAccess0x30=LastAccess0x30,
                LastRecordChange0x30=LastRecordChange0x30,
                Created0x30=Created0x30 ) AS TimestampsFN,
            parse_pe(file=OSPath) AS DllInfo,
            authenticode(filename=OSPath) AS DllAuthenticode,
            hash(path=OSPath) as DllHash,
            enrich_ioc(filename=FileName)[0] as HijackLib,
            { SELECT OSPath FROM glob(root=dirname(path=OSPath),globs='*')} as Folder
      FROM hits


  - name: Find Dll forwards
    query: |
      -- yara pe module is most performant way to find DLLs with forward exports.
      LET ForwardsYaraRule = '''import "pe"
        rule Has_Export_Forwarders {
            condition:
                for any forwarder in pe.export_details: (forwarder.forward_name != "YR_UNDEFINED")
        }
        '''

      LET IocCsv <= SELECT * FROM parse_csv(filename=AllCsv,accessor='data')
      LET files = SELECT
            EntryNumber,InUse,ParentEntryNumber,
            format(format='C:\\%s',args=OSPath) as OSPath,
            FileName as DllName, FileSize,SI_Lt_FN,uSecZeros,
            LastModified0x10,LastAccess0x10,LastRecordChange0x10,Created0x10,
            LastModified0x30,LastAccess0x30,LastRecordChange0x30,Created0x30
        FROM parse_mft(filename='C:/$MFT')
        WHERE InUse and NOT IsDir
            AND FileName in IocCsv.DllName
            --AND FileName =~ '\.dll$'
            AND NOT OSPath =~ '''^C:\\(Windows\\(System32|SysWOW64|WinSxS|Microsoft\.NET|assembly|SoftwareDistribution)|\<Err\>)\\'''
            AND NOT OSPath =~ '''\\(Microsoft.NET.Native.Runtime|Microsoft.NETCore.App\\)|\\Program Files( \(x86\))?\\(Microsoft Visual Studio|WindowsApps\\Microsoft)'''

      LET enrich_ioc(filename) = SELECT * FROM IocCsv WHERE DllName = filename

      SELECT
        OSPath, DllName,FileSize,InUse, SI_Lt_FN,uSecZeros,
            dict(
                LastModified0x10=LastModified0x10,
                LastAccess0x10=LastAccess0x10,
                LastRecordChange0x10=LastRecordChange0x10,
                Created0x10=Created0x10 ) AS TimestampsSI,
            dict(
                LastModified0x30=LastModified0x30,
                LastAccess0x30=LastAccess0x30,
                LastRecordChange0x30=LastRecordChange0x30,
                Created0x30=Created0x30 ) AS TimestampsFN,
            parse_pe(file=OSPath) AS DllInfo,
            authenticode(filename=OSPath) as DllAuthenticode,
            hash(path=OSPath) as DllHash,
            enrich_ioc(filename=DllName)[0] as HijackLib,
            { SELECT OSPath FROM glob(root=dirname(path=OSPath),globs='*')} as Folder
          FROM foreach(row=files,
                query={
                    SELECT
                        OSPath,
                        DllName, FileSize,InUse,SI_Lt_FN,uSecZeros,
                        LastModified0x10,LastAccess0x10,LastRecordChange0x10,Created0x10,
                        LastModified0x30,LastAccess0x30,LastRecordChange0x30,Created0x30
                    FROM yara(rules=ForwardsYaraRule, files=OSPath)
                })
