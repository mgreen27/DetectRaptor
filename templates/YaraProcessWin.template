name: Windows.Detection.YaraProcessWin
author: Matt Green - @mgreen27
description: |
   This artifact is a bulk yara hunt for Windows Process Yara.

   This artifact is automatically generated by DetectRaptor.
   Default yara set extracts all yara-forge yara rules with "memory" string.
   
   Additional detection can be added to the artifact as desired.

reference:
  - https://github.com/mgreen27/DetectRaptor
  - https://github.com/YARAHQ/yara-forge


type: CLIENT
resources:
  timeout: 9000

parameters:
  - name: ProcessRegex
    default: .
    type: regex
  - name: PidRegex
    default: .
    type: regex
  - name: UploadHits
    type: bool
  - name: YaraRule
    type: yara
    description: Final Yara option and the default if no other options provided.
    default: |
%splitme%
  - name: NumberOfHits
    description: THis artifact will stop by default at one hit. This setting allows additional hits
    default: 1
    type: int
  - name: ContextBytes
    description: Include this amount of bytes around hit as context.
    default: 0
    type: int64
  - name: ExePathWhitelist
    description: Regex of ProcessPaths to exclude
    type: regex


sources:
  - precondition:
      SELECT OS From info() where OS = 'windows'

    query: |
      -- find velociraptor process
      LET me <= SELECT Pid FROM pslist(pid=getpid())

      -- find all processes and add filters
      LET processes = SELECT Name as ProcessName, Exe as ExePath, CommandLine, Pid, WorkingSetSize
        FROM pslist()
        WHERE
            Name =~ ProcessRegex
            AND format(format="%d", args=Pid) =~ PidRegex
            AND NOT Pid in me.Pid
            AND NOT if(condition=ExePathWhitelist,
                    then= Exe=~ExePathWhitelist)

      -- scan processes in scope with our rule, limit 1 hit
      LET hits = SELECT * FROM foreach(
        row=processes,
        query={
            SELECT
                ProcessName,
                ExePath,
                CommandLine,
                Pid,
                Namespace,
                Rule,
                Meta,
                String.Name as YaraString,
                String.Offset as HitOffset,
                upload( accessor='scope',
                    file='String.Data',
                    name=format(format="%v-%v_%v",
                    args=[
                        split(string=ProcessName, sep='\\.')[0], Pid,
                        String.Offset ]
                    )) as HitContext
             FROM yara(
                files=format(format="/%d", args=Pid),
                accessor='process',
                rules=YaraRule,
                context=ContextBytes,
                number=NumberOfHits,
                vars=dict(filepath=ExePath) )
          })

      -- upload hits using proc_dump plugin
      LET upload_hits = SELECT * FROM foreach(
        row=hits,
        query={
            SELECT
                ProcessName,
                ExePath,
                CommandLine,
                Pid,
                Namespace,
                Rule,
                Meta,
                YaraString,
                HitOffset,
                HitContext,
                upload(
                  file=OSPath,
                  name=format(format='%v-%v.dmp',
                    args= [ split(string=ProcessName, sep='\\.')[0], Pid ])
                ) as ProcessDump
            FROM proc_dump(pid=Pid)
          })

      -- return rows
      SELECT * FROM if(condition=UploadHits,
        then=upload_hits,
        else=hits)
