name: Windows.Detection.LolRMM
author: Matt Green - @mgreen27 and Herbert Bärschneider
description: |
  This artifact hunts for Remote Monitoring and Management (RMM) tools using the 
  LolRMM project. The goal is to detect installed or running instances.
  
  Detectraptor generates a Regex csv that is pulled locally to the Velociraptor 
  server via the tools management capability.
  
  NOTE: This artifact may not detect RMMs that are not installed, renamed or 
  using custom DNS.
  
  Special thanks to Herbert Bärschneider for inspiring this artifact on the 
  Artifact Exchange. :)

reference:
  - https://github.com/mgreen27/DetectRaptor
  - https://lolrmm.io/
  - https://attack.mitre.org/techniques/T1219/

tools:
  - name: DetectRaptorLolRMM
    url: https://github.com/mgreen27/DetectRaptor/raw/master/csv/lolrmm.csv
    serve_locally: true

type: CLIENT
resources:
  timeout: 1200

sources:
  - query: |
      LET lolrmm <= SELECT OSPath FROM Artifact.Generic.Utils.FetchBinary(
                ToolName='DetectRaptorLolRMM',
                IsExecutable='N' )
      
      LET lolrmm_csv <= SELECT Name, Description, LolRMMLink, PathRegex, DomainRegex 
        FROM parse_csv(filename=lolrmm[0].OSPath)
        
      LET AllNameRegex <= join(array=filter(list=lolrmm_csv.Name, regex="^[^$]"),sep='|')
      LET AllPathRegex <= join(array=filter(list=lolrmm_csv.PathRegex, regex="^[^$]"),sep='|')
                
      LET program_hits = SELECT * FROM Artifact.Windows.Sys.Programs()
        WHERE DisplayName =~ AllNameRegex
            OR ProcessName =~ AllPathRegex
        
      SELECT * FROM foreach(row=program_hits, 
                query={
                    SELECT _Source as Source,
                        Name,Description,LolRMMLink, 
                        dict( 
                            PathRegex = PathRegex,
                            DomainRegex=DomainRegex
                                ) as HitRegex,
                        dict(
                            DisplayName=DisplayName,
                            DisplayVersion=DisplayVersion,
                            InstallLocation=InstallLocation,
                            InstallSource=InstallSource,
                            Publisher=Publisher,
                            UninstallString=UninstallString,
                            InstallDate=InstallDate
                                ) as Event
                    FROM lolrmm_csv
                    WHERE 
                        ( Name AND DisplayName =~ Name )
                        OR ( PathRegex AND InstallLocation =~ PathRegex )
                },workers=20)
      WHERE NOT ( Name = 'ToDesk' AND Event.DisplayName =~ '^Autodesk' )
                
  - name: Processes
    query: |
      LET process_hits = SELECT Pid,Name as ProcessName,CommandLine,Exe,Authenticode,
            parse_pe(file=Exe).VersionInformation as VersionInformation,
            _Source
        FROM Artifact.Windows.System.Pslist()
        WHERE 
            ProcessName =~ AllPathRegex
            OR Exe =~ AllPathRegex
            OR VersionInformation.OriginalFilename =~ AllPathRegex
            OR VersionInformation.InternalFileName =~ AllPathRegex
                
      SELECT * FROM foreach(row=process_hits, 
            query={
                SELECT _Source as Source,
                    Name,Description,LolRMMLink, 
                    dict( 
                        PathRegex = PathRegex,
                        DomainRegex=DomainRegex
                            ) as HitRegex,
                    dict(
                        Pid=Pid,
                        ProcessName=Name,
                        Exe=Exe,
                        CommandLine=CommandLine,
                        VersionInformation=VersionInformation,
                        Authenticode=Authenticode
                            ) as Event
                FROM lolrmm_csv
                WHERE PathRegex 
                    AND ( ProcessName =~ PathRegex 
                            OR Exe =~ PathRegex
                            OR VersionInformation.OriginalFilename =~ PathRegex
                            OR VersionInformation.InternalFileName  =~ PathRegex )
            },workers=20)

  - name: ResolvedDomains
    query: |
      LET dns_hits = SELECT Name as DNSName, *, _Source as Source FROM Artifact.Windows.System.DNSCache()
        WHERE DNSName =~ join(array=filter(list=lolrmm_csv.DomainRegex, regex="^[^$]"),sep='|')
        
      SELECT * FROM foreach(row=dns_hits, 
                query={
                    SELECT Source, 
                        Name,Description,LolRMMLink, 
                        dict( PathRegex = PathRegex,
                              DomainRegex=DomainRegex
                            ) as HitRegex,
                        dict(DNSName=DNSName,
                             Record=Record,
                             RecordType=RecordType,
                             TTL=TTL
                            ) as Event
                    FROM lolrmm_csv
                    WHERE DomainRegex AND DNSName =~ DomainRegex
                },workers=20)

    notebook:
      - type: vql_suggestion
        name: Installed programs RMM summary
        template: |
            /*
            ## Installed programs RMM summary
            */
            SELECT Name,Description,
                Event.DisplayName as DisplayName,
                Event.DisplayVersion as DisplayVersion,
                count() as Total
            FROM source(artifact="DetectRaptor.Windows.Detection.LolRMM")
            GROUP BY Name,DisplayVersion,DisplayName
            ORDER BY DisplayName

      - type: vql_suggestion
        name: Running processes RMM summary
        template: |
            /*
            ## Running processes RMM summary
            */
            SELECT Name,Description,Event.Exe as Exe,
                count() as Total
            FROM source(artifact="DetectRaptor.Windows.Detection.LolRMM/Processes")
            GROUP BY name,Description,Exe
            ORDER By Exe

      - type: vql_suggestion
        name: DNS resolver RMM summary
        template: |
            /*
            ## DNS resolver RMM summary
            */
            LET results <= SELECT *
              FROM source(artifact="DetectRaptor.Windows.Detection.LolRMM/ResolvedDomains")

            LET x(name) = SELECT *, Event.DNSName as DNSName FROM results 
              WHERE Name = name
              GROUP BY DNSName

            LET y(name) = SELECT *, Event.Record as Record FROM results 
              WHERE Name = name
              GROUP BY Record

            SELECT Name,Description,
                  count() as Total,
                  x(name=Name).DNSName as DNSNames,
                  y(name=Name).Record as Records
              FROM results
              GROUP BY Name,Description
              
      - type: vql_suggestion
        name: Add Tags and stack all results
        template: |
            /*
            # Add Tags and stack all results
            */
            
            LET DoIt = False
            SELECT *, 
                if(condition=DoIt, 
                    then= label(client_id=ClientId,op='set',labels='RMM:' + Name),
                    else= 'Set DotIt as True to add tag - RMM:' + Name)  as Tag
            FROM chain(
                    a= { SELECT * FROM source(artifact="DetectRaptor.Windows.Detection.LolRMM") },
                    b= { SELECT * FROM source(artifact="DetectRaptor.Windows.Detection.LolRMM/Processes") },
                    c= { SELECT * FROM source(artifact="DetectRaptor.Windows.Detection.LolRMM/ResolvedDomains") })
            WHERE TRUE
                -- Try to filter by individual event to ensure we dont filter out TPs masquerading
                AND NOT Event.DisplayName = 'Rapid7 Insight Agent' 
                AND NOT ( Event.Authenticode.SubjectName = "C=US, ST=Massachusetts, L=Boston, O=Rapid7 LLC, CN=Rapid7 LLC" AND Event.Authenticode.Trusted = "trusted" ) 
                AND NOT Event.DNSName =~ '''\.rapid7\.com$'''
