name: Windows.Detection.Powershell.ISEAutoSave
author: Matt Green - @mgreen27
description: |
   Bulk indicator hunt over Powershell ISEAutoSave files.
   This artifact is automatically generated by DetectRaptor.

reference:
  - https://github.com/mgreen27/DetectRaptor

type: CLIENT
resources:
  timeout: 6000

parameters:
  - name: AutoSaveFiles
    default: C:\Users\*\AppData\*\Microsoft_Corporation\Powershell_ISE.exe*\*\AutoSaveFiles\*.ps1
    description: ISE Autosave file glob
  - name: IOCs
    type: csv
    default: |
        eventlog,id,name,eventid,rule,ignore
        system.evtx,win_sus_service,T1543.003-Suspicious Windows Service Creation,^(7045)$,echo|COMSPEC|powershell|ADMIN\\$|C\\$|cmd\.exe|MiniDump|lsass\.exe|BTOBTO|Sliver,
        powershell,win_powershell_web,T1059.001-PowerShell Web Request,^(4104)$,Invoke-WebRequest|iwr |wget |curl |Net.WebClient|Start-BitsTransfer,Get-SystemDriveInfo|Function Get-Software|Windows Defender Advanced Threat Protection
        powershell,win_powershell_suspicious_keywords,T1059.001-Suspicious Powershell Commandlets,^(200|400|800|4100|4103|4104)$,Invoke-Expression|-noP -sta -w 1 -enc |IEX |-W Hidden|-WindowStyle Hidden|-nop |127\.0\.0\.1|System\.Reflection\.AssemblyName|System\.Reflection\.Emit\.AssemblyBuilderAccess|System\.Runtime\.InteropServices\.MarshalAsAttribute|memorystream|SuspendThread|GzipStream,DisableUnusedSmb1.ps1|chocolatey|Windows Defender Advanced Threat Protection|Microsoft Intune Management Extension|AppData\\Local\\Temp\\SDIAG_
        powershell,win_powershell_base64,T1059.001-Use of Base64 Commands,^(200|400|800|4100|4103|4104)$,FromBase64String|EncodedCommand|-En |-Enc,struct LSA_ENUMERATION_INFORMATION|Windows Defender Advanced Threat Protection|AppData\\Local\\Temp\\SDIAG_|-Encoding UTF8
        powershell,win_powershell_mimikatz,T1059.001-Mimikatz Execution via PowerShell,^(200|400|800|4100|4103|4104)$,TOKEN_PRIVILE|SE_PRIVILEGE_ENABLED|mimikatz|lsass\.dmp|-dumpcr|SEKURLSA::Pth|kerberos::ptt|kerberos::golden,CIS_1.10.1_L1_Monitor.ps1|namespace PS_LSA|Windows Defender Advanced Threat Protection|AppData\\Local\\Temp\\SDIAG_
        powershell,win_powershell_memoryloader,T1059.001-Loading Powershell in Memory,^(200|400|800|4100|4103|4104)$,System\.Reflection\.AssemblyName|System\.Reflection\.Emit\.AssemblyBuilderAccess|System\.Runtime\.InteropServices\.MarshalAsAttribute|memorystream,AppData\\Local\\Temp\\SDIAG_|Defender Advanced Threat Protection
        powershell,win_powershell_cobaltstrike_loader,T1059.001-Cobalt Strike Powershell Loader,^(200|400|800|4100|4103|4104)$,\$Doit|-bxor 35,
        powershell,win_powershell_malicious_cmdlets,T1059.001-Malicious Powershell Commandlets,^(200|400|800|4100|4103|4104)$,Invoke-DllInjection|Invoke-Shellcode|Invoke-WmiCommand|Get-GPPPassword|Get-Keystrokes|Get-TimedScreenshot|Get-VaultCredential|Invoke-CredentialInjection|Invoke-Mimikatz|Invoke-NinjaCopy|Invoke-TokenManipulation|Out-Minidump|VolumeShadowCopyTools|Invoke-ReflectivePEInjection|Invoke-UserHunter|Invoke-ACLScanner|Invoke-DowngradeAccount|Get-ServiceUnquoted|Get-ServiceFilePermission|Get-ServicePermission|Invoke-ServiceAbuse|Install-ServiceBinary|Get-RegAutoLogon|Get-VulnAutoRun|Get-VulnSchTask|Get-UnattendedInstallFile|Get-ApplicationHost|Get-RegAlwaysInstallElevated|Get-Unconstrained|Add-RegBackdoor|Add-ScrnSaveBackdoor|Gupt-Backdoor|Invoke-ADSBackdoor|Enabled-DuplicateToken|Invoke-PsUaCme|Remove-Update|Check-VM|Get-LSASecret|Get-PassHashes|Show-TargetScreen|Port-Scan|Invoke-PoshRatHttp|Invoke-PowerShellTCP|Invoke-PowerShellWMI|Add-Exfiltration|Add-Persistence|Do-Exfiltration|Start-CaptureServer|Get-ChromeDump|Get-ClipboardContents|Get-FoxDump|Get-IndexedItem|Get-Screenshot|Invoke-Inveigh|Invoke-NetRipper|Invoke-EgressCheck|Invoke-PostExfil|Invoke-PSInject|Invoke-RunAs|MailRaider|New-HoneyHash|Set-MacAttribute|Invoke-DCSync|Invoke-PowerDump|Exploit-Jboss|Invoke-ThunderStruck|Invoke-VoiceTroll|Set-Wallpaper|Invoke-InveighRelay|Invoke-PsExec|Invoke-SSHCommand|Get-SecurityPackages|Install-SSP|Invoke-BackdoorLNK|PowerBreach|Get-SiteListPassword|Get-System|Invoke-BypassUAC|Invoke-Tater|Invoke-WScriptBypassUAC|PowerUp|PowerView|Get-RickAstley|Find-Fruit|HTTP-Login|Find-TrustedDocuments|Invoke-Paranoia|Invoke-WinEnum|Invoke-ARPScan|Invoke-PortScan|Invoke-ReverseDNSLookup|Invoke-SMBScanner|Invoke-Mimikittenz|Invoke-SessionGopher|Invoke-AllChecks|Start-Dnscat|Invoke-KrbRelayUp|Invoke-Rubeus|Invoke-Pandemonium|Invoke-Mongoose|Invoke-NETMongoose|Invoke-SecretsDump|Invoke-NTDS|Invoke-SharpRDP|Invoke-Kirby|Invoke-SessionHunter|Invoke-PrintNightmare|Invoke-Monkey365|Invoke-AzureHound|Kerberoast|Bloodhound|Sharphound,Get-SystemDriveInfo
        powershell,win_powershell_tamper_with_windows_defender,T1562.001-Win Defender Disable using Powershell,^(200|400|800|4100|4103|4104)$,Set-MpPreference -DisableRealtimeMonitoring|Set-MpPreference DisableBehaviorMonitoring|Set-MpPreference -DisableScriptScanning|Set-MpPreference -DisableBlockAtFirstSeen|MpPreference -ExclusionPath,
        "{Powershell,Security,Sysmon}",win_proxy_hunter,T0884-Connection Proxy,.,"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}:\d{1,5}:\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:\d{1,5} :\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:\d{1,5}:socks",
        powershell,win_powershell_tcpsocket^(4103|4104)$,C2-Powershell Socket Connection,^(4103|4104)$,Net\.Sockets\.TCPClient,\\ProgramData\\Microsoft\\Windows Defender Advanced Threat Protection\\Downloads\\PSScript_.+\.ps1
        powershell,win_powershell_dns,Powershell potential DNS disruption,^(4103|4104)$,Add-DnsClientNrptRule|New-NetRoute|drivers\\etc\\hosts,Microsoft\.PowerShell\.Cmdletization\.MethodParameter
        powershell,win_powershell_downgrade,Powershell potential downgrade attack,^(4103|4104)$,-ve*r*s*i*o*n*\s+2|powershell -version,
        powershell,win_powershell_large_b64,Powershell large Base64 blob,^(4103|4104)$,"[a-z0-9+\/]{44,}([a-z0-9+\/]{4}|[a-z0-9+\/]{3}=|[a-z0-9+\/]{2}==)",


sources:
  - precondition:
      SELECT OS From info() where OS = 'windows'

    query: |
        LET rules = SELECT id, name, rule, ignore FROM IOCs 
                 WHERE eventlog =~ "powershell" AND rule
        
        LET files = SELECT OSPath, Size, Mtime, Btime, Ctime, Atime
        FROM glob(globs=AutoSaveFiles)
        
        LET hits = SELECT OSPath, Size, Mtime, Btime, Ctime, Atime,
                read_file(filename=OSPath) as Content
            FROM foreach(row=files)
            WHERE Content =~ join(array=rules.rule,sep='|')
        
        SELECT * FROM foreach(row=hits,
                query={
                        SELECT 
                            dict(
                                ID = id,
                                Name = name,
                                Regex = rule,
                                IgnoreRegex = ignore,
                                HitString=parse_string_with_regex(string=Content,
                                    regex='(' + rule + ')' ).g1 
                                        ) as Detection,
                            dict(
                                OSPath = OSPath,
                                Size = Size,
                                Mtime = Mtime,
                                Atime = Atime,
                                Ctime = Ctime,
                                Btime = Btime ) as FileInfo,
                            Content
                        FROM rules 
                        WHERE Content =~ Detection.Regex
                            AND NOT if(condition= Detection.IgnoreRegex,
                                            then= Content=~Detection.IgnoreRegex,
                                            else= False )
                    })